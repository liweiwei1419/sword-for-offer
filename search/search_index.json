{
    "docs": [
        {
            "location": "/03-\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 3 \u9898] \u201c\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\uff08\u6876\u6392\u5e8f\uff0c\u62bd\u5c49\u539f\u7406\uff09\n\n\n\u4f20\u9001\u95e8\uff1a\nAcWing\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\n\uff0c\n\u725b\u5ba2\u7f51 online judge \u5730\u5740\n\u3002\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6574\u6570\u6570\u7ec4 \nnums\n\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\u3002\n\n\n\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\n\n\n\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\n\n\n\u6ce8\u610f\n\uff1a\u5982\u679c\u67d0\u4e9b\u6570\u5b57\u4e0d\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\uff0c\u6216\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u5219\u8fd4\u56de $-1$\uff1b\n\n\n\u6837\u4f8b\uff1a\n\n\n\u7ed9\u5b9a \nnums = [2, 3, 5, 4, 3, 2, 6, 7]\n\u3002\n\n\n\u8fd4\u56de $2$ \u6216 $3$\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u6700\u5bb9\u6613\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u5224\u91cd\u3002\u5728 $n$ \u4e0d\u8d85\u8fc7 $32$ \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5224\u91cd\u3002\n\n\n\u601d\u8def2\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u518d\u904d\u5386\u4e00\u904d\u5c31\u77e5\u9053\u54ea\u4e2a\u91cd\u590d\u4e86\u3002\n\n\n\u601d\u8def3\uff1a\u201c\u62bd\u5c49\u539f\u7406\u201d\u3002\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6211\u4eec\u4f7f\u7528\u6876\u6392\u5e8f\u7684\u601d\u60f3\uff08\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff09\uff0c\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002\n\n\nPython \u4ee3\u7801\uff1a\u8fd9\u4e2a\u89e3\u6cd5\u4f1a\u4fee\u6539\u539f\u59cb\u6570\u7ec4\n\n\nclass Solution(object):\n    def duplicateInArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype int\n        \"\"\"\n\n        size = len(nums)\n        if size < 2:\n            return -1\n\n        # \u5148\u7edf\u4e00\u68c0\u67e5\u6570\u5b57\u662f\u4e0d\u662f\u8d8a\u754c\u4e86\n        for i in range(size):\n            if nums[i] < 0 or nums[i] > size - 1:\n                return -1\n\n        for i in range(size):\n\n            # nums[i] \u5e94\u8be5\u5728 i \u7684\u4f4d\u7f6e\u4e0a\n            while i != nums[i]:\n                # \u53d1\u73b0\u8981\u4ea4\u6362\u7684\u90a3\u4e2a\u6570\u548c\u81ea\u5df1\u4e00\u6837\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n                if nums[i] == nums[nums[i]]:\n                    return nums[i]\n                self.__swap(nums, i, nums[i])\n        return -1\n\n    def __swap(self, nums, index1, index2):\n        if index1 == index2:\n            return\n        temp = nums[index1]\n        nums[index1] = nums[index2]\n        nums[index2] = temp\n\n\n\n\n\u601d\u8def4\uff1a\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5373\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u3002\n\n\nLeetCode \u7b2c 287 \u9898\uff1a\n\u5bfb\u627e\u91cd\u590d\u6570\n\n\n\u4f20\u9001\u95e8\uff1a\n287. \u5bfb\u627e\u91cd\u590d\u6570\n\u3002\n\n\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b \nn\n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 \nnums\n\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 \nn\n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c \nn\n\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165: \n[1,3,4,2,2]\n\n\u8f93\u51fa: 2\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165: \n[3,1,3,4,2]\n\n\u8f93\u51fa: 3\n\n\n\u8bf4\u660e\uff1a\n\n\n\n\n\u4e0d\u80fd\n\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002\n\n\n\u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 $O(1)$ \u7684\u7a7a\u95f4\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e $O(n^2)$ \u3002\n\n\n\u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002\n\n\n\n\n\n\n\u601d\u8def\uff1a\u5206\u6cbb\u6cd5\uff0c\u7528\u4e8c\u5206\u53bb\u505a\uff0c\n\u662f\u5bf9\u201c\u6570\u201d\u505a\u4e8c\u5206\uff0c\u800c\u4e0d\u662f\u5bf9\u201c\u7d22\u5f15\u201d\n\u505a\u4e8c\u5206\u3002\n\n\nPython \u4ee3\u7801\uff1a\u4f7f\u7528\u4e86\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\uff0c\u8981\u5b9a\u4f4d\u7684\u201c\u6570\u201d\u6839\u636e\u9898\u610f\u5728 $1$ \u548c $n$ \u4e4b\u95f4\n\n\nclass Solution:\n\n    def findDuplicate(self, nums):\n        \"\"\"\n        \u3010\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3011\n        \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\n        \u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c\n        \u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\n        \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        left = 1\n        right = len(nums) - 1\n        while left < right:\n            # \u53d6\u4e2d\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u504f\u5de6\u548c\u504f\u53f3\n            mid = left + (right - left + 1) // 2  # 4\n            count = 0\n            for num in nums:\n                if num < mid:\n                    count += 1\n            if count < mid:\n                # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u6700\u591a\u5c31\u53ea\u80fd\u662f 3\n                # \u6240\u4ee5\u91cd\u590d\u7684\u80af\u5b9a\u4e0d\u662f [1,2,3]\uff0c\u4e0d\u80fd\u6392\u9664 4\n                # \u56e0\u4e3a\u5de6\u8fb9\u4e0d\u53d8\uff0c\u6240\u4ee5\u53d6\u4e2d\u70b9\u7684\u65f6\u5019\uff0c\u5c31\u8981\u504f\u53f3\n                left = mid\n            else:\n                # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u8fbe\u5230 4 \u6216\u8005\u66f4\u591a\n                # \u91cd\u590d\u7684\u5c31\u843d\u5728 [1,2,3]\n                right = mid - 1\n        # \u8df3\u51fa\u5faa\u73af\u80af\u5b9a\u662f\u56e0\u4e3a start = end\n        return left\n\n\n\n\n\u53c2\u8003\u8d44\u6599\uff1a\n\u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\n\u3002",
            "title": "03-\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"
        },
        {
            "location": "/03-\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57/#offer-2-3",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 3 \u9898] \u201c\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/03-\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57/#3",
            "text": "\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002   \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6574\u6570\u6570\u7ec4  nums \uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\u3002  \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002  \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002  \u6ce8\u610f \uff1a\u5982\u679c\u67d0\u4e9b\u6570\u5b57\u4e0d\u5728 $0\u223cn\u22121$ \u7684\u8303\u56f4\u5185\uff0c\u6216\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u5219\u8fd4\u56de $-1$\uff1b  \u6837\u4f8b\uff1a  \u7ed9\u5b9a  nums = [2, 3, 5, 4, 3, 2, 6, 7] \u3002  \u8fd4\u56de $2$ \u6216 $3$\u3002   \u601d\u8def1\uff1a\u6700\u5bb9\u6613\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u5224\u91cd\u3002\u5728 $n$ \u4e0d\u8d85\u8fc7 $32$ \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u7a7a\u95f4\u590d\u6742\u5ea6\u5224\u91cd\u3002  \u601d\u8def2\uff1a\u6392\u5e8f\u4ee5\u540e\uff0c\u518d\u904d\u5386\u4e00\u904d\u5c31\u77e5\u9053\u54ea\u4e2a\u91cd\u590d\u4e86\u3002  \u601d\u8def3\uff1a\u201c\u62bd\u5c49\u539f\u7406\u201d\u3002\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6211\u4eec\u4f7f\u7528\u6876\u6392\u5e8f\u7684\u601d\u60f3\uff08\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff09\uff0c\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002  Python \u4ee3\u7801\uff1a\u8fd9\u4e2a\u89e3\u6cd5\u4f1a\u4fee\u6539\u539f\u59cb\u6570\u7ec4  class Solution(object):\n    def duplicateInArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype int\n        \"\"\"\n\n        size = len(nums)\n        if size < 2:\n            return -1\n\n        # \u5148\u7edf\u4e00\u68c0\u67e5\u6570\u5b57\u662f\u4e0d\u662f\u8d8a\u754c\u4e86\n        for i in range(size):\n            if nums[i] < 0 or nums[i] > size - 1:\n                return -1\n\n        for i in range(size):\n\n            # nums[i] \u5e94\u8be5\u5728 i \u7684\u4f4d\u7f6e\u4e0a\n            while i != nums[i]:\n                # \u53d1\u73b0\u8981\u4ea4\u6362\u7684\u90a3\u4e2a\u6570\u548c\u81ea\u5df1\u4e00\u6837\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n                if nums[i] == nums[nums[i]]:\n                    return nums[i]\n                self.__swap(nums, i, nums[i])\n        return -1\n\n    def __swap(self, nums, index1, index2):\n        if index1 == index2:\n            return\n        temp = nums[index1]\n        nums[index1] = nums[index2]\n        nums[index2] = temp  \u601d\u8def4\uff1a\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5373\u4f7f\u7528\u201c\u4e8c\u5206\u6cd5\u201d\u3002",
            "title": "\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\uff08\u6876\u6392\u5e8f\uff0c\u62bd\u5c49\u539f\u7406\uff09"
        },
        {
            "location": "/03-\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57/#leetcode-287",
            "text": "\u4f20\u9001\u95e8\uff1a 287. \u5bfb\u627e\u91cd\u590d\u6570 \u3002   \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b  n  + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4  nums \uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230  n  \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c  n \uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002  \u793a\u4f8b 1:  \u8f93\u5165:  [1,3,4,2,2] \n\u8f93\u51fa: 2  \u793a\u4f8b 2:  \u8f93\u5165:  [3,1,3,4,2] \n\u8f93\u51fa: 3  \u8bf4\u660e\uff1a   \u4e0d\u80fd \u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002  \u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 $O(1)$ \u7684\u7a7a\u95f4\u3002  \u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e $O(n^2)$ \u3002  \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002    \u601d\u8def\uff1a\u5206\u6cbb\u6cd5\uff0c\u7528\u4e8c\u5206\u53bb\u505a\uff0c \u662f\u5bf9\u201c\u6570\u201d\u505a\u4e8c\u5206\uff0c\u800c\u4e0d\u662f\u5bf9\u201c\u7d22\u5f15\u201d \u505a\u4e8c\u5206\u3002  Python \u4ee3\u7801\uff1a\u4f7f\u7528\u4e86\u4e8c\u5206\u6cd5\u7684\u6a21\u677f\uff0c\u8981\u5b9a\u4f4d\u7684\u201c\u6570\u201d\u6839\u636e\u9898\u610f\u5728 $1$ \u548c $n$ \u4e4b\u95f4  class Solution:\n\n    def findDuplicate(self, nums):\n        \"\"\"\n        \u3010\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3011\n        \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\n        \u5176\u6570\u5b57\u90fd\u5728 1 \u5230 n \u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c n\uff09\uff0c\n        \u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\n        \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        left = 1\n        right = len(nums) - 1\n        while left < right:\n            # \u53d6\u4e2d\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u504f\u5de6\u548c\u504f\u53f3\n            mid = left + (right - left + 1) // 2  # 4\n            count = 0\n            for num in nums:\n                if num < mid:\n                    count += 1\n            if count < mid:\n                # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u6700\u591a\u5c31\u53ea\u80fd\u662f 3\n                # \u6240\u4ee5\u91cd\u590d\u7684\u80af\u5b9a\u4e0d\u662f [1,2,3]\uff0c\u4e0d\u80fd\u6392\u9664 4\n                # \u56e0\u4e3a\u5de6\u8fb9\u4e0d\u53d8\uff0c\u6240\u4ee5\u53d6\u4e2d\u70b9\u7684\u65f6\u5019\uff0c\u5c31\u8981\u504f\u53f3\n                left = mid\n            else:\n                # \u6bd4 4 \u5c0f\u7684\u4e2a\u6570\uff0c\u8fbe\u5230 4 \u6216\u8005\u66f4\u591a\n                # \u91cd\u590d\u7684\u5c31\u843d\u5728 [1,2,3]\n                right = mid - 1\n        # \u8df3\u51fa\u5faa\u73af\u80af\u5b9a\u662f\u56e0\u4e3a start = end\n        return left  \u53c2\u8003\u8d44\u6599\uff1a \u300a\u5251\u6307 Offer\u300b\uff08\u7b2c 2 \u7248\uff09\u7b2c 3 \u9898\uff1a\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u3002",
            "title": "LeetCode \u7b2c 287 \u9898\uff1a\u5bfb\u627e\u91cd\u590d\u6570"
        },
        {
            "location": "/04-\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 4 \u9898] \u201c\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 4 \u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\n\n\n\u540c LeetCode \u7b2c 240 \u9898\uff0cLeetCode \u4f20\u9001\u95e8\uff1a\n\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II\n\uff0cAcWing\uff1a\n\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\n\uff0c\u725b\u5ba2\u7f51\u4f20\u9001\u95e8\uff1a\n\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\n\u3002\n\n\n\n\n\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\n\n\n\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002\n\n\n\u6837\u4f8b\uff1a\n\n\n\u8f93\u5165\u6570\u7ec4\uff1a\n\n\n[\n     [1,2,8,9]\uff0c\n     [2,4,9,12]\uff0c\n     [4,7,10,13]\uff0c\n     [6,8,11,15]\n]\n\n\n\u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 7\uff0c\u5219\u8fd4\u56de true\uff0c\n\n\n\u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 5 \uff0c\u5219\u8fd4\u56de false\u3002\n\n\n\n\n\u5206\u6790\uff1a\u6709\u70b9\u50cf LeetCode \u4e0a\u5c9b\u5c7f\u7684\u95ee\u9898\uff0c\u7279\u522b\u4e4b\u5904\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u6216\u8005\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u627e\uff0c\n\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u9009\u5de6\u4e0a\u6216\u8005\u53f3\u4e0b\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7f29\u5c0f\u67e5\u627e\u8303\u56f4\n\u3002\u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\u4e00\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\u4e00\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002\n\n\n\nPython \u4ee3\u7801\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u3002\n\u5c0f\u4e86\u5411\u4e0b\u9762\u8d70\uff0c\u5927\u4e86\u5411\u5de6\u8fb9\u8d70\n\n\nclass Solution(object):\n\n    def searchArray(self, array, target):\n        rows = len(array)\n        if rows == 0:\n            return False\n\n        cols = len(array[0])\n        if rows > 0 and cols > 0:\n            row = 0\n            col = cols - 1\n            # \u6ce8\u610f\uff1a\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6709\u610f\u4e49\u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u641c\u7d22\uff0c\u56e0\u6b64\u7528 and\n            while row < rows and col >= 0:\n                if target == array[row][col]:\n                    return True\n                elif target < array[row][col]:\n                    # [4, 5, 6, 12, 13] \u627e 7\n                    col -= 1\n                else:\n                    # [7]\n                    # [8]\n                    # [12] \u627e 9\n                    row += 1\n        # \u5168\u90e8\u8d70\u5b8c\u90fd\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\n        return False\n\n\n\n\n\u8bf4\u660e\uff1a\u5176\u5b9e\u4e0d\u7ba1\u662f\u6bcf\u884c\u8fd8\u662f\u6bcf\u5217\uff0c\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\u6211\u5199\u4e86\u4e2a\u4e8c\u5206\u6cd5\uff0c\u53ea\u662f\u4f5c\u4e3a\u7ec3\u4e60\u3002\u4f46\u662f\u4e8c\u5206\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u6b21\u5199\u5bf9\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u3002\n\n\n\n\n\u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a\n\u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b\n\n\u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002\n\n\n\u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002\n\n\n\n\nJava \u4ee3\u7801\uff1a\n\n\npublic class Solution {\n\n    public boolean Find(int target, int[][] array) {\n        int row = array.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = array[0].length;\n        // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5148\u4ece\u5de6\u5230\u53f3\uff0c\u518d\u4ece\u4e0b\u5230\u4e0a\n        int i = row - 1;\n\n        int j = 0;\n        while (i >= 0) {\n            while (j < col && array[i][j] < target) {\n                j++;\n            }\n            if (j < col && array[i][j] == target) {\n                return true;\n            }\n            i--;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = new int[][]{\n                {1, 2, 8, 9},\n                {2, 4, 9, 12},\n                {4, 7, 10, 13},\n                {6, 8, 11, 15}\n        };\n        Solution solution = new Solution();\n        boolean find = solution.Find(16, matrix);\n        System.out.println(find);\n    }\n}\n\n\n\n\nPython \u4ee3\u7801\uff1a\uff08\u4e86\u89e3\u5373\u53ef\uff09\n\n\n# 4\u3001\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\n\nclass Solution(object):\n\n    # \u4e8c\u5206\u6cd5\u67e5\u627e\u89c4\u5f8b\n    # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n    # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n\n    def searchArray(self, array, target):\n        \"\"\"\n        :type array: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n\n        rows = len(array)\n        if rows == 0:\n            return False\n        cols = len(array[0])\n\n        col = cols - 1\n        row = 0\n\n        while row < rows and col >= 0:\n\n            # print('row', row, 'col', col, array[row][0])\n            # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n            if col == 0 and array[row][0] > target:\n                return False\n            l = 0\n            r = col\n            while l < r:\n                mid = l + (r - l + 1) // 2\n                if array[row][mid] <= target:\n                    l = mid\n                else:\n                    assert array[row][mid] > target\n                    r = mid - 1\n            col = l\n\n            # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n            if row == rows - 1 and array[rows - 1][col] < target:\n                return False\n\n            l = row\n            r = rows - 1\n            while l < r:\n                mid = l + (r - l) // 2\n                if array[mid][col] >= target:\n                    r = mid\n                else:\n                    assert array[mid][col] < target\n                    l = mid + 1\n            row = l\n\n            if array[row][col] == target:\n                return True\n\n        return False\n\n\nif __name__ == '__main__':\n    array = [[1, 2, 8, 9],\n             [2, 4, 9, 12],\n             [4, 7, 10, 13],\n             [6, 8, 11, 15]]\n    target = 16\n    solution = Solution()\n    result = solution.searchArray(array, target)\n    print(result)\n\n\n\n\nLeetCode \u7b2c 74 \u9898\uff1a\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635\n\n\n\u4f20\u9001\u95e8\uff1a\n\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635\n\u3002\n\n\n\n\n\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad \nm\n x \nn\n \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a\n\n\n\n\n\u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002\n\n\n\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002\n\n\n\n\n\u793a\u4f8b 1:\n\n\n\u8f93\u5165:\nmatrix = [\n[1,   3,  5,  7],\n[10, 11, 16, 20],\n[23, 30, 34, 50]\n]\ntarget = 3\n\u8f93\u51fa: true\n\n\n\u793a\u4f8b 2:\n\n\n\u8f93\u5165:\nmatrix = [\n[1,   3,  5,  7],\n[10, 11, 16, 20],\n[23, 30, 34, 50]\n]\ntarget = 13\n\u8f93\u51fa: false\n\n\n\n\nPython \u4ee3\u78011\uff1a\u201c\u6807\u51c6\u7684\u201d\u4e8c\u5206\u6cd5\n\n\nclass Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        if n == 0:\n            return False\n        left = 0\n        # \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u51cf 1\n        right = m * n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            # \u5b9a\u4f4d\u5230\u77e9\u9635\u4e2d\n            num = matrix[mid // n][mid % n]\n            if num == target:\n                return True\n            elif num < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n\n\n\nPython \u4ee3\u78012\uff1a\u201c\u795e\u5947\u7684\u201d\u4e8c\u5206\u6cd5\u6a21\u677f\n\n\nclass Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        # [[]] \u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u7279\u5224\n        if n == 0:\n            return False\n\n        l = 0\n        r = m * n - 1\n\n        while l < r:\n            mid = l + (r - l) // 2\n            if matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid\n        # \u8fd9\u4e2a\u6a21\u677f\u5728\u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019 l == r \u6210\u7acb\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u5b58\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\n        # \u6240\u4ee5\u8981\u5355\u72ec\u5224\u65ad\n        return matrix[l // n][l % n] == target",
            "title": "04-\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"
        },
        {
            "location": "/04-\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e/#offer-2-4",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 4 \u9898] \u201c\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/04-\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e/#4",
            "text": "\u540c LeetCode \u7b2c 240 \u9898\uff0cLeetCode \u4f20\u9001\u95e8\uff1a \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II \uff0cAcWing\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \uff0c\u725b\u5ba2\u7f51\u4f20\u9001\u95e8\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u3002   \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002  \u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002  \u6837\u4f8b\uff1a  \u8f93\u5165\u6570\u7ec4\uff1a  [\n     [1,2,8,9]\uff0c\n     [2,4,9,12]\uff0c\n     [4,7,10,13]\uff0c\n     [6,8,11,15]\n]  \u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 7\uff0c\u5219\u8fd4\u56de true\uff0c  \u5982\u679c\u8f93\u5165\u67e5\u627e\u6570\u503c\u4e3a 5 \uff0c\u5219\u8fd4\u56de false\u3002   \u5206\u6790\uff1a\u6709\u70b9\u50cf LeetCode \u4e0a\u5c9b\u5c7f\u7684\u95ee\u9898\uff0c\u7279\u522b\u4e4b\u5904\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u6216\u8005\u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u627e\uff0c \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u9009\u5de6\u4e0a\u6216\u8005\u53f3\u4e0b\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7f29\u5c0f\u67e5\u627e\u8303\u56f4 \u3002\u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217\uff1b\u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\u4e00\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\u4e00\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002  Python \u4ee3\u7801\uff1a\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u3002 \u5c0f\u4e86\u5411\u4e0b\u9762\u8d70\uff0c\u5927\u4e86\u5411\u5de6\u8fb9\u8d70  class Solution(object):\n\n    def searchArray(self, array, target):\n        rows = len(array)\n        if rows == 0:\n            return False\n\n        cols = len(array[0])\n        if rows > 0 and cols > 0:\n            row = 0\n            col = cols - 1\n            # \u6ce8\u610f\uff1a\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6709\u610f\u4e49\u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u641c\u7d22\uff0c\u56e0\u6b64\u7528 and\n            while row < rows and col >= 0:\n                if target == array[row][col]:\n                    return True\n                elif target < array[row][col]:\n                    # [4, 5, 6, 12, 13] \u627e 7\n                    col -= 1\n                else:\n                    # [7]\n                    # [8]\n                    # [12] \u627e 9\n                    row += 1\n        # \u5168\u90e8\u8d70\u5b8c\u90fd\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\n        return False  \u8bf4\u660e\uff1a\u5176\u5b9e\u4e0d\u7ba1\u662f\u6bcf\u884c\u8fd8\u662f\u6bcf\u5217\uff0c\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\u6211\u5199\u4e86\u4e2a\u4e8c\u5206\u6cd5\uff0c\u53ea\u662f\u4f5c\u4e3a\u7ec3\u4e60\u3002\u4f46\u662f\u4e8c\u5206\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u6b21\u5199\u5bf9\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u3002   \u6b63\u786e\u7684\u641c\u7d22\u8d77\u70b9\u662f\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a\n\u4ece\u4e0b\u5230\u4e0a\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5c0f\uff1b \n\u4ece\u5de6\u5230\u53f3\uff0c\u6570\u5b57\u8d8a\u6765\u8d8a\u5927\u3002  \u6ce8\u610f\u6307\u9488\u6ca1\u6709\u5fc5\u8981\u56de\u9000\uff0c\u8fd9\u4e00\u70b9\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6ce8\u91ca\u4e2d\u505a\u4e86\u5f3a\u8c03\u3002   Java \u4ee3\u7801\uff1a  public class Solution {\n\n    public boolean Find(int target, int[][] array) {\n        int row = array.length;\n        if (row == 0) {\n            return false;\n        }\n        int col = array[0].length;\n        // \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\u641c\u7d22\uff0c\u5148\u4ece\u5de6\u5230\u53f3\uff0c\u518d\u4ece\u4e0b\u5230\u4e0a\n        int i = row - 1;\n\n        int j = 0;\n        while (i >= 0) {\n            while (j < col && array[i][j] < target) {\n                j++;\n            }\n            if (j < col && array[i][j] == target) {\n                return true;\n            }\n            i--;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = new int[][]{\n                {1, 2, 8, 9},\n                {2, 4, 9, 12},\n                {4, 7, 10, 13},\n                {6, 8, 11, 15}\n        };\n        Solution solution = new Solution();\n        boolean find = solution.Find(16, matrix);\n        System.out.println(find);\n    }\n}  Python \u4ee3\u7801\uff1a\uff08\u4e86\u89e3\u5373\u53ef\uff09  # 4\u3001\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\n\nclass Solution(object):\n\n    # \u4e8c\u5206\u6cd5\u67e5\u627e\u89c4\u5f8b\n    # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n    # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n\n    def searchArray(self, array, target):\n        \"\"\"\n        :type array: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n\n        rows = len(array)\n        if rows == 0:\n            return False\n        cols = len(array[0])\n\n        col = cols - 1\n        row = 0\n\n        while row < rows and col >= 0:\n\n            # print('row', row, 'col', col, array[row][0])\n            # 1\u3001\u4ece\u53f3\u5230\u5de6\uff0c\u627e\u7b2c 1 \u4e2a\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n            if col == 0 and array[row][0] > target:\n                return False\n            l = 0\n            r = col\n            while l < r:\n                mid = l + (r - l + 1) // 2\n                if array[row][mid] <= target:\n                    l = mid\n                else:\n                    assert array[row][mid] > target\n                    r = mid - 1\n            col = l\n\n            # 2\u3001\u4ece\u4e0a\u5230\u4e0b\uff0c\u627e\u7b2c 1 \u4e2a\u5927\u4e8e\u6216\u8005\u7b49\u4e8e target \u7684\u6570\n            if row == rows - 1 and array[rows - 1][col] < target:\n                return False\n\n            l = row\n            r = rows - 1\n            while l < r:\n                mid = l + (r - l) // 2\n                if array[mid][col] >= target:\n                    r = mid\n                else:\n                    assert array[mid][col] < target\n                    l = mid + 1\n            row = l\n\n            if array[row][col] == target:\n                return True\n\n        return False\n\n\nif __name__ == '__main__':\n    array = [[1, 2, 8, 9],\n             [2, 4, 9, 12],\n             [4, 7, 10, 13],\n             [6, 8, 11, 15]]\n    target = 16\n    solution = Solution()\n    result = solution.searchArray(array, target)\n    print(result)",
            "title": "\u7b2c 4 \u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"
        },
        {
            "location": "/04-\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e/#leetcode-74",
            "text": "\u4f20\u9001\u95e8\uff1a \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u3002   \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad  m  x  n  \u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a   \u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002  \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002   \u793a\u4f8b 1:  \u8f93\u5165:\nmatrix = [\n[1,   3,  5,  7],\n[10, 11, 16, 20],\n[23, 30, 34, 50]\n]\ntarget = 3\n\u8f93\u51fa: true  \u793a\u4f8b 2:  \u8f93\u5165:\nmatrix = [\n[1,   3,  5,  7],\n[10, 11, 16, 20],\n[23, 30, 34, 50]\n]\ntarget = 13\n\u8f93\u51fa: false   Python \u4ee3\u78011\uff1a\u201c\u6807\u51c6\u7684\u201d\u4e8c\u5206\u6cd5  class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        if n == 0:\n            return False\n        left = 0\n        # \u8fd9\u91cc\u4e00\u5b9a\u8981\u8bb0\u5f97\u51cf 1\n        right = m * n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            # \u5b9a\u4f4d\u5230\u77e9\u9635\u4e2d\n            num = matrix[mid // n][mid % n]\n            if num == target:\n                return True\n            elif num < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False  Python \u4ee3\u78012\uff1a\u201c\u795e\u5947\u7684\u201d\u4e8c\u5206\u6cd5\u6a21\u677f  class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        # [[]] \u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u7279\u5224\n        if n == 0:\n            return False\n\n        l = 0\n        r = m * n - 1\n\n        while l < r:\n            mid = l + (r - l) // 2\n            if matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid\n        # \u8fd9\u4e2a\u6a21\u677f\u5728\u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019 l == r \u6210\u7acb\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u5b58\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\n        # \u6240\u4ee5\u8981\u5355\u72ec\u5224\u65ad\n        return matrix[l // n][l % n] == target",
            "title": "LeetCode \u7b2c 74 \u9898\uff1a\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635"
        },
        {
            "location": "/06-\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 6 \u9898] \u201c\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 6 \u9898\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\n\n\n\u4f20\u9001\u95e8\uff1a\nAcWing\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\n\uff0c\n\u725b\u5ba2\u7f51 online judge \u5730\u5740\n\u3002\n\n\n\n\n\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6309\u7167 \n\u4ece\u5c3e\u5230\u5934\n \u7684\u987a\u5e8f\u8fd4\u56de\u8282\u70b9\u7684\u503c\u3002\n\n\n\u8fd4\u56de\u7684\u7ed3\u679c\u7528\u6570\u7ec4\u5b58\u50a8\u3002\n\n\n\u6837\u4f8b\uff1a\n\n\n\u8f93\u5165\uff1a\n[2, 3, 5]\n\n\u8fd4\u56de\uff1a\n[5, 3, 2]\n\n\n\n\n\u5206\u6790\uff1a\n\n\n\n\n\u4f7f\u7528\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u3002\n\n\n\u65e2\u7136\u4f7f\u7528\u4e86\u6808\uff0c\u9012\u5f52\u6c42\u89e3\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u601d\u8def\u3002\n\n\n\n\n\u601d\u8def1\uff1a\u9996\u5148\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u6808\u4f5c\u4e3a\u8f85\u52a9\u3002\n\n\nPython \u4ee3\u78011\uff1aPython \u4e2d\u7684\u5217\u8868\u6709\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u6bcf\u6b21\u5728\u7d22\u5f15 $0$ \u5904\u63d2\u5165\u5143\u7d20\u597d\u4e86\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n\n    def printListReversingly(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        p = head\n        stack = []\n        while p:\n            stack.append(p.val)\n            p = p.next\n        return stack[::-1]   \n\n\n\n\nPython \u4ee3\u78012\uff1a\n\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n\n    def printListReversingly(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        p = head\n        stack = []\n        while p:\n            stack.insert(0, p.val)\n            p = p.next\n        return stack\n\n\n\n\nJava \u4ee3\u7801\uff1a\u4f7f\u7528\u6808\u8f85\u52a9\u5b8c\u6210\n\n\nimport java.util.ArrayList;\nimport java.util.Stack;\n\nclass ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}\n\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> res = new ArrayList<>();\n        if (listNode == null) {\n            return res;\n        }\n        Stack<Integer> stack = new Stack<>();\n        ListNode curNode = listNode;\n        while (curNode != null) {\n            stack.add(curNode.val);\n            curNode = curNode.next;\n        }\n        while (!stack.isEmpty()) {\n            res.add(stack.pop());\n        }\n        return res;\n    }\n}\n\n\n\n\n\u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\uff0c\u5173\u952e\u5728\u4e8e\u9012\u5f52\u51fd\u6570\u7684\u7f16\u5199\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5230\u7ed3\u679c\u96c6\u4e2d\u3002\n\n\nPython \u4ee3\u7801\uff1a\n\n\nclass Solution(object):\n\n    def printListReversingly(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        self.helper(res, head)\n        return res\n\n    def helper(self, res, listnode):\n        if listnode is None:\n            return\n        # \u5e94\u8be5\u5148\u5224\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9012\u5f52\u8c03\u7528\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u624d\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        if listnode.next:\n            self.helper(res, listnode.next)\n        # \u8fd9\u4e00\u6b65\u7279\u522b\u5173\u952e\uff1a\u56de\u6eaf\u65f6\u6dfb\u52a0\n        res.append(listnode.val)\n\n\n\n\nJava \u4ee3\u7801\uff1a\n\n\nimport java.util.ArrayList;\n\npublic class Solution2 {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> res = new ArrayList<>();\n        if (listNode == null) {\n            return res;\n        }\n        printListFromTailToHead(listNode, res);\n        return res;\n    }\n\n    private void printListFromTailToHead(ListNode listNode, ArrayList<Integer> res) {\n        if (listNode == null) {\n            return;\n        }\n        // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u6b63\u5e8f\n        if (listNode.next != null) {\n            printListFromTailToHead(listNode.next, res);\n        }\n        // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u5012\u5e8f\n        res.add(listNode.val);\n    }\n}\n\n\n\n\n\u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u3002\n\n\n\n\n\u62ff\u5177\u4f53\u7684\u6d4b\u8bd5\u7528\u4f8b\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\uff0c\u4e0d\u80fd\u4f7f\u7528 if else \u8bed\u53e5\u3002",
            "title": "06-\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"
        },
        {
            "location": "/06-\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868/#offer-2-6",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 6 \u9898] \u201c\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/06-\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868/#6",
            "text": "\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002   \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6309\u7167  \u4ece\u5c3e\u5230\u5934  \u7684\u987a\u5e8f\u8fd4\u56de\u8282\u70b9\u7684\u503c\u3002  \u8fd4\u56de\u7684\u7ed3\u679c\u7528\u6570\u7ec4\u5b58\u50a8\u3002  \u6837\u4f8b\uff1a  \u8f93\u5165\uff1a [2, 3, 5] \n\u8fd4\u56de\uff1a [5, 3, 2]   \u5206\u6790\uff1a   \u4f7f\u7528\u6808\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u3002  \u65e2\u7136\u4f7f\u7528\u4e86\u6808\uff0c\u9012\u5f52\u6c42\u89e3\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u601d\u8def\u3002   \u601d\u8def1\uff1a\u9996\u5148\u5e94\u8be5\u60f3\u5230\uff0c\u4f7f\u7528\u6808\u4f5c\u4e3a\u8f85\u52a9\u3002  Python \u4ee3\u78011\uff1aPython \u4e2d\u7684\u5217\u8868\u6709\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u6bcf\u6b21\u5728\u7d22\u5f15 $0$ \u5904\u63d2\u5165\u5143\u7d20\u597d\u4e86  # Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n\n    def printListReversingly(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        p = head\n        stack = []\n        while p:\n            stack.append(p.val)\n            p = p.next\n        return stack[::-1]     Python \u4ee3\u78012\uff1a  # Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n\n    def printListReversingly(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        p = head\n        stack = []\n        while p:\n            stack.insert(0, p.val)\n            p = p.next\n        return stack  Java \u4ee3\u7801\uff1a\u4f7f\u7528\u6808\u8f85\u52a9\u5b8c\u6210  import java.util.ArrayList;\nimport java.util.Stack;\n\nclass ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}\n\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> res = new ArrayList<>();\n        if (listNode == null) {\n            return res;\n        }\n        Stack<Integer> stack = new Stack<>();\n        ListNode curNode = listNode;\n        while (curNode != null) {\n            stack.add(curNode.val);\n            curNode = curNode.next;\n        }\n        while (!stack.isEmpty()) {\n            res.add(stack.pop());\n        }\n        return res;\n    }\n}  \u601d\u8def2\uff1a\u4f7f\u7528\u9012\u5f52\uff0c\u5173\u952e\u5728\u4e8e\u9012\u5f52\u51fd\u6570\u7684\u7f16\u5199\uff0c\u7279\u522b\u6ce8\u610f\uff1a\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5230\u7ed3\u679c\u96c6\u4e2d\u3002  Python \u4ee3\u7801\uff1a  class Solution(object):\n\n    def printListReversingly(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        self.helper(res, head)\n        return res\n\n    def helper(self, res, listnode):\n        if listnode is None:\n            return\n        # \u5e94\u8be5\u5148\u5224\u65ad\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u9012\u5f52\u8c03\u7528\uff0c\u5728\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u624d\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n        if listnode.next:\n            self.helper(res, listnode.next)\n        # \u8fd9\u4e00\u6b65\u7279\u522b\u5173\u952e\uff1a\u56de\u6eaf\u65f6\u6dfb\u52a0\n        res.append(listnode.val)  Java \u4ee3\u7801\uff1a  import java.util.ArrayList;\n\npublic class Solution2 {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> res = new ArrayList<>();\n        if (listNode == null) {\n            return res;\n        }\n        printListFromTailToHead(listNode, res);\n        return res;\n    }\n\n    private void printListFromTailToHead(ListNode listNode, ArrayList<Integer> res) {\n        if (listNode == null) {\n            return;\n        }\n        // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u6b63\u5e8f\n        if (listNode.next != null) {\n            printListFromTailToHead(listNode.next, res);\n        }\n        // \u5199\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u5012\u5e8f\n        res.add(listNode.val);\n    }\n}  \u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u5199\u6cd5\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u3002   \u62ff\u5177\u4f53\u7684\u6d4b\u8bd5\u7528\u4f8b\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\uff0c\u4e0d\u80fd\u4f7f\u7528 if else \u8bed\u53e5\u3002",
            "title": "\u7b2c 6 \u9898\uff1a\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"
        },
        {
            "location": "/05-\u66ff\u6362\u7a7a\u683c/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 5 \u9898] \u201c\u66ff\u6362\u7a7a\u683c\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 5 \u9898\uff1a\u66ff\u6362\u7a7a\u683c\n\n\n\u4f20\u9001\u95e8\uff1a\n\u725b\u5ba2\u7f51 online judge \u5730\u5740\n\u3002\n\n\n\n\n\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002\n\n\n\n\n\u5206\u6790\uff1a\u8fd9\u9053\u95ee\u9898\u5176\u5b9e\u5e94\u8be5\u5728 C++ \u8bed\u8a00\u4e2d\uff0c\u8003\u70b9\u4f1a\u66f4\u7a81\u51fa\u4e00\u4e9b\u3002\u8fd9\u9053\u9898\u4f7f\u7528 Java \u8bed\u8a00\u7684\u5199\u6cd5\u66f4\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u8003\u67e5\u70b9\u4e0e LeetCode \u7b2c 88 \u9898\uff0888. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff09\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\u601d\u8003\uff0c\u6253\u7834\u601d\u7ef4\u5b9a\u52bf\u3002\n\n\nJava \u4ee3\u7801\uff1a\n\n\npublic class Solution {\n\n    public String replaceSpace(StringBuffer str) {\n        int len = str.length();\n        if (len == 0) {\n            return \"\";\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            if (c == ' ') {\n                stringBuilder.append(\"%20\");\n            } else {\n                stringBuilder.append(c);\n            }\n        }\n        return stringBuilder.toString();\n    }\n}\n\n\n\n\nJava \u4ee3\u7801\uff1a\n\n\npublic class Solution2 {\n\n    public String replaceSpace(StringBuffer str) {\n        return str.toString().replaceAll(\"\\\\s\", \"%20\");\n    }\n}",
            "title": "05-\u66ff\u6362\u7a7a\u683c"
        },
        {
            "location": "/05-\u66ff\u6362\u7a7a\u683c/#offer-2-5",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 5 \u9898] \u201c\u66ff\u6362\u7a7a\u683c\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/05-\u66ff\u6362\u7a7a\u683c/#5",
            "text": "\u4f20\u9001\u95e8\uff1a \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002   \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002   \u5206\u6790\uff1a\u8fd9\u9053\u95ee\u9898\u5176\u5b9e\u5e94\u8be5\u5728 C++ \u8bed\u8a00\u4e2d\uff0c\u8003\u70b9\u4f1a\u66f4\u7a81\u51fa\u4e00\u4e9b\u3002\u8fd9\u9053\u9898\u4f7f\u7528 Java \u8bed\u8a00\u7684\u5199\u6cd5\u66f4\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u9053\u9898\u8003\u67e5\u70b9\u4e0e LeetCode \u7b2c 88 \u9898\uff0888. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff09\u4e00\u6837\uff0c\u4ece\u540e\u5411\u524d\u601d\u8003\uff0c\u6253\u7834\u601d\u7ef4\u5b9a\u52bf\u3002  Java \u4ee3\u7801\uff1a  public class Solution {\n\n    public String replaceSpace(StringBuffer str) {\n        int len = str.length();\n        if (len == 0) {\n            return \"\";\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            if (c == ' ') {\n                stringBuilder.append(\"%20\");\n            } else {\n                stringBuilder.append(c);\n            }\n        }\n        return stringBuilder.toString();\n    }\n}  Java \u4ee3\u7801\uff1a  public class Solution2 {\n\n    public String replaceSpace(StringBuffer str) {\n        return str.toString().replaceAll(\"\\\\s\", \"%20\");\n    }\n}",
            "title": "\u7b2c 5 \u9898\uff1a\u66ff\u6362\u7a7a\u683c"
        },
        {
            "location": "/07-\u91cd\u5efa\u4e8c\u53c9\u6811/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 7 \u9898] \u201c\u91cd\u5efa\u4e8c\u53c9\u6811\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 7 \u9898\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811\uff08\u9012\u5f52\uff09\n\n\n\u540c LeetCode \u7b2c 105 \u9898\uff0c\u4f20\u9001\u95e8\uff1a\n\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811\n\u3002\n\n\n\u4f20\u9001\u95e8\uff1a\nAcWing\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811\n\uff0c\n\u725b\u5ba2\u7f51 online judge \u5730\u5740\n\u3002\n\n\n\n\n\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002\n\n\n\u6ce8\u610f\n:\n\n\n\n\n\u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e92\u4e0d\u76f8\u540c\uff1b\n\n\n\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u5408\u6cd5\uff1b\n\n\n\n\n\u6837\u4f8b\uff1a\n\n\n\u7ed9\u5b9a\uff1a\n\u524d\u5e8f\u904d\u5386\u662f\uff1a\n[3, 9, 20, 15, 7]\n\n\u4e2d\u5e8f\u904d\u5386\u662f\uff1a\n[9, 3, 15, 20, 7]\n\n\n\u8fd4\u56de\uff1a\n[3, 9, 20, null, null, 15, 7, null, null, null, null]\n\n\u8fd4\u56de\u7684\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a\uff1a\n\n\n3\n    / \\\n  9  20\n      / \\\n    15  7\n\n\n\n\n\u5206\u6790\uff1a\n\n\n\n\n\u753b\u56fe\u662f\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5173\u952e\uff0c\u5343\u4e07\u4e0d\u8981\u72af\u61d2\uff0c\u62ff\u51fa\u7eb8\u548c\u7b14\uff0c\u52a8\u624b\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5f80\u5f80\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff1b\n\n\n\u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u63d2\u5165\u8282\u70b9\u7684\u65b9\u5f0f\u5efa\u7acb\u4e8c\u53c9\u6811\uff0c\u5373\u4f7f\u7528\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u65b0\u521b\u5efa\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u5c06\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u6302\u63a5\u5230\u539f\u6765\u7684\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u7ed3\u70b9\u4e2d\uff1b\n\n\n\u524d\u5e8f\u904d\u5386\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5c31\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u4e0d\u96be\u5199\u51fa\u9012\u5f52\u51fd\u6570\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u8fd9\u662f\u4ee5\u201c\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u201d\u4e3a\u524d\u63d0\u7684\u3002\n\n\n\n\n\n\n\n\n\u601d\u8def\uff1a\u9012\u5f52\u91cd\u5efa\u3002\u4e8c\u53c9\u6811\u7684 DFS \u6709\u5982\u4e0b\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a\n\n\n\n\n\u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002\n\n\n\u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002\n\n\n\u540e\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u7ed3\u70b9\u3002\n\n\n\n\n\u672c\u9898\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u6700\u5c11\u9700\u8981\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u624d\u80fd\u91cd\u5efa\u4e8c\u53c9\u6811\u3002\n\n\n\u5173\u952e\uff1a\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c $1$ \u4e2a\u6570\uff08\u7d22\u5f15\u4e3a $0$\uff09\u7684\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u201c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u548c\u201c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u5bf9\u5e94\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5206\u522b\u9012\u5f52\u5b8c\u6210\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\n\n\n\n\u6ce8\u610f\uff1a1\u3001\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5148\u5199\u7279\u6b8a\u60c5\u51b5\uff1b\n\n\n2\u3001\u7d22\u5f15\u662f\u591a\u5c11\u4e0d\u597d\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5e72\u8106\u5c31\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5c31\u6bd4\u5982\u6211\u4e0a\u9762\u753b\u7684\u8fd9\u4e2a\u56fe\uff0c\u628a\u5177\u4f53\u7684\u6570\u6362\u6210\u6211\u4eec\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u601d\u8003\u7684\u96be\u5ea6\u4f1a\u964d\u4f4e\uff0c\u800c\u4e14\u8fd8\u4e0d\u5bb9\u6613\u51fa\u9519\u3002\n\n\nPython \u4ee3\u7801\uff1a\n\n\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        \u8fd4\u56de\u6784\u9020\u7684 TreeNode \u6839\u7ed3\u70b9\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        # \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1 len(pre) == len(tin)\uff0c\u5426\u5219\u903b\u8f91\u4e00\u5b9a\u4e0d\u6b63\u786e\n        if len(preorder) == 0:\n            return None\n        if len(preorder) == 1:\n            # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570\n            return TreeNode(preorder[0])\n        root = TreeNode(preorder[0])\n        # \u76f4\u63a5\u5f97\u5230\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u9762\u7b97\u597d\u504f\u79fb\u91cf\u5c31\u597d\u4e86\uff0c\u5982\u679c\u5bb9\u6613\u7b97\u9519\uff0c\u8bb0\u5f97\u62ff\u5177\u4f53\u4f8b\u5b50\n        pos = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:pos + 1], inorder[:pos])\n        root.right = self.buildTree(preorder[pos + 1:], inorder[pos + 1:])\n        return root\n\n\n\n\nJava \u4ee3\u7801\uff1a\n\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode reConstructBinaryTree(int[] pre, int[] in) {\n        TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1);\n        return root;\n    }\n\n    /**\n     * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811\n     *\n     * @param pre  \u524d\u5e8f\u904d\u5386\u6570\u7ec4\n     * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9\n     * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9\n     * @param in   \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\n     * @param inL  \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9\n     * @param inR  \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9\n     * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\n     */\n    private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) {\n        if (preL > preR || inL > inR) {\n            return null;\n        }\n        // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\n        TreeNode root = new TreeNode(pre[preL]);\n        // \u4ece\u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u548c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u7684\u503c\u76f8\u7b49\u7684\u8282\u70b9\n        int i = inL;\n        while (in[i] != pre[preL] && i <= inR) {\n            i++;\n        }\n        // \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4e2d\u904d\u5386\u4e86\u51e0\u4e2a\u5143\u7d20\uff1a i - inL\n        // \u63a5\u4e0b\u6765\u5c31\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u4e8e\u627e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u548c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u7aef\u70b9\n        root.left = reConstructBinaryTree(pre, preL + 1, preL + (i - inL), in, inL, i - 1);\n        root.right = reConstructBinaryTree(pre, preL + (i - inL) + 1, preR, in, i + 1, inR);\n        return root;\n    }\n}\n\n\n\n\n\u7c7b\u4f3c\u95ee\u9898\uff1aLeetCode \u7b2c 106 \u9898\u3002\n\n\nLeetCode \u7b2c 106 \u9898\uff1a\n\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811\n\n\n\u4f20\u9001\u95e8\uff1a\n106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811\n\u3002\n\n\n\n\n\u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002\n\n\n\u6ce8\u610f:\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002\n\n\n\u4f8b\u5982\uff0c\u7ed9\u51fa\n\n\n\u4e2d\u5e8f\u904d\u5386 inorder = \n[9,3,15,20,7]\n\n\u540e\u5e8f\u904d\u5386 postorder = \n[9,15,7,20,3]\n\n\n\u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a\n\n3\n   / \\\n  9  20\n      / \\\n     15  7\n\n\n\n\n\u601d\u8def\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\uff0c\u5728\u7eb8\u4e0a\u5199\u5199\u753b\u753b\u66f4\u5f62\u8c61\u3002\n\n\nPython \u4ee3\u7801\uff1a\n\n\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n\n        assert len(inorder) == len(postorder)\n\n        if len(inorder) == 0:\n            return None\n        if len(inorder) == 1:\n            # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570\n            return TreeNode(inorder[0])\n\n        # \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9\n        root = TreeNode(postorder[-1])\n\n        pos = inorder.index(postorder[-1])\n\n        root.left = self.buildTree(inorder[:pos], postorder[:pos])\n        root.right = self.buildTree(inorder[pos + 1:], postorder[pos:-1])\n        return root\n\n\n# \u7528\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5\ndef validate(node):\n    if node is None:\n        return\n    validate(node.left)\n    print(node.val, end=' ')\n    validate(node.right)\n\n\nif __name__ == '__main__':\n    inorder = [9, 3, 15, 20, 7]\n    postorder = [9, 15, 7, 20, 3]\n    solution = Solution()\n    root = solution.buildTree(inorder, postorder)\n    validate(root)",
            "title": "07-\u91cd\u5efa\u4e8c\u53c9\u6811"
        },
        {
            "location": "/07-\u91cd\u5efa\u4e8c\u53c9\u6811/#offer-2-7",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 7 \u9898] \u201c\u91cd\u5efa\u4e8c\u53c9\u6811\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/07-\u91cd\u5efa\u4e8c\u53c9\u6811/#7",
            "text": "\u540c LeetCode \u7b2c 105 \u9898\uff0c\u4f20\u9001\u95e8\uff1a \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002  \u4f20\u9001\u95e8\uff1a AcWing\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002   \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002  \u6ce8\u610f :   \u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e92\u4e0d\u76f8\u540c\uff1b  \u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u5408\u6cd5\uff1b   \u6837\u4f8b\uff1a  \u7ed9\u5b9a\uff1a\n\u524d\u5e8f\u904d\u5386\u662f\uff1a [3, 9, 20, 15, 7] \n\u4e2d\u5e8f\u904d\u5386\u662f\uff1a [9, 3, 15, 20, 7]  \u8fd4\u56de\uff1a [3, 9, 20, null, null, 15, 7, null, null, null, null] \n\u8fd4\u56de\u7684\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a\uff1a  3\n    / \\\n  9  20\n      / \\\n    15  7   \u5206\u6790\uff1a   \u753b\u56fe\u662f\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5173\u952e\uff0c\u5343\u4e07\u4e0d\u8981\u72af\u61d2\uff0c\u62ff\u51fa\u7eb8\u548c\u7b14\uff0c\u52a8\u624b\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5f80\u5f80\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff1b  \u7528\u7c7b\u4f3c\u4e8c\u53c9\u6811\u63d2\u5165\u8282\u70b9\u7684\u65b9\u5f0f\u5efa\u7acb\u4e8c\u53c9\u6811\uff0c\u5373\u4f7f\u7528\u9012\u5f52\u51fd\u6570\uff0c\u8fd4\u56de\u65b0\u521b\u5efa\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u5c06\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u6302\u63a5\u5230\u539f\u6765\u7684\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u7ed3\u70b9\u4e2d\uff1b  \u524d\u5e8f\u904d\u5386\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u5c31\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u4e0d\u96be\u5199\u51fa\u9012\u5f52\u51fd\u6570\u7684\u4ee3\u7801\u3002\u6ce8\u610f\u8fd9\u662f\u4ee5\u201c\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u201d\u4e3a\u524d\u63d0\u7684\u3002     \u601d\u8def\uff1a\u9012\u5f52\u91cd\u5efa\u3002\u4e8c\u53c9\u6811\u7684 DFS \u6709\u5982\u4e0b\u4e09\u79cd\u904d\u5386\u65b9\u5f0f\uff1a   \u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002  \u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\u3002  \u540e\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u5de6\u5b50\u7ed3\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u7ed3\u70b9\u3002   \u672c\u9898\u4e3a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u6700\u5c11\u9700\u8981\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u624d\u80fd\u91cd\u5efa\u4e8c\u53c9\u6811\u3002  \u5173\u952e\uff1a\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c $1$ \u4e2a\u6570\uff08\u7d22\u5f15\u4e3a $0$\uff09\u7684\u6570\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u7684\u7d22\u5f15\uff0c\u7136\u540e\u628a\u201c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u548c\u201c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u201d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u5bf9\u5e94\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5206\u522b\u9012\u5f52\u5b8c\u6210\u5c31\u53ef\u4ee5\u4e86\u3002    \u6ce8\u610f\uff1a1\u3001\u7f16\u5199\u9012\u5f52\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u5148\u5199\u7279\u6b8a\u60c5\u51b5\uff1b  2\u3001\u7d22\u5f15\u662f\u591a\u5c11\u4e0d\u597d\u5224\u65ad\u7684\u65f6\u5019\uff0c\u5e72\u8106\u5c31\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5c31\u6bd4\u5982\u6211\u4e0a\u9762\u753b\u7684\u8fd9\u4e2a\u56fe\uff0c\u628a\u5177\u4f53\u7684\u6570\u6362\u6210\u6211\u4eec\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u601d\u8003\u7684\u96be\u5ea6\u4f1a\u964d\u4f4e\uff0c\u800c\u4e14\u8fd8\u4e0d\u5bb9\u6613\u51fa\u9519\u3002  Python \u4ee3\u7801\uff1a  class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        \u8fd4\u56de\u6784\u9020\u7684 TreeNode \u6839\u7ed3\u70b9\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        # \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1 len(pre) == len(tin)\uff0c\u5426\u5219\u903b\u8f91\u4e00\u5b9a\u4e0d\u6b63\u786e\n        if len(preorder) == 0:\n            return None\n        if len(preorder) == 1:\n            # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570\n            return TreeNode(preorder[0])\n        root = TreeNode(preorder[0])\n        # \u76f4\u63a5\u5f97\u5230\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u9762\u7b97\u597d\u504f\u79fb\u91cf\u5c31\u597d\u4e86\uff0c\u5982\u679c\u5bb9\u6613\u7b97\u9519\uff0c\u8bb0\u5f97\u62ff\u5177\u4f53\u4f8b\u5b50\n        pos = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:pos + 1], inorder[:pos])\n        root.right = self.buildTree(preorder[pos + 1:], inorder[pos + 1:])\n        return root  Java \u4ee3\u7801\uff1a  class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class Solution {\n\n    public TreeNode reConstructBinaryTree(int[] pre, int[] in) {\n        TreeNode root = reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1);\n        return root;\n    }\n\n    /**\n     * \u6839\u636e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [preL, preR] \u548c \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684 [inL, inR] \u91cd\u65b0\u7ec4\u5efa\u4e8c\u53c9\u6811\n     *\n     * @param pre  \u524d\u5e8f\u904d\u5386\u6570\u7ec4\n     * @param preL \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9\n     * @param preR \u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9\n     * @param in   \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\n     * @param inL  \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u5de6\u7aef\u70b9\n     * @param inR  \u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u533a\u95f4\u53f3\u7aef\u70b9\n     * @return \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\n     */\n    private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) {\n        if (preL > preR || inL > inR) {\n            return null;\n        }\n        // \u6784\u5efa\u7684\u65b0\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\u4e00\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\n        TreeNode root = new TreeNode(pre[preL]);\n        // \u4ece\u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u548c\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u7b2c 1 \u4e2a\u5143\u7d20\u7684\u503c\u76f8\u7b49\u7684\u8282\u70b9\n        int i = inL;\n        while (in[i] != pre[preL] && i <= inR) {\n            i++;\n        }\n        // \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4e2d\u904d\u5386\u4e86\u51e0\u4e2a\u5143\u7d20\uff1a i - inL\n        // \u63a5\u4e0b\u6765\u5c31\u662f\u9012\u5f52\u8c03\u7528\uff0c\u5173\u952e\u7684\u5730\u65b9\u5728\u4e8e\u627e\u524d\u5e8f\u904d\u5386\u6570\u7ec4\u548c\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u5bf9\u5e94\u7684\u533a\u95f4\u7684\u7aef\u70b9\n        root.left = reConstructBinaryTree(pre, preL + 1, preL + (i - inL), in, inL, i - 1);\n        root.right = reConstructBinaryTree(pre, preL + (i - inL) + 1, preR, in, i + 1, inR);\n        return root;\n    }\n}  \u7c7b\u4f3c\u95ee\u9898\uff1aLeetCode \u7b2c 106 \u9898\u3002",
            "title": "\u7b2c 7 \u9898\uff1a\u91cd\u5efa\u4e8c\u53c9\u6811\uff08\u9012\u5f52\uff09"
        },
        {
            "location": "/07-\u91cd\u5efa\u4e8c\u53c9\u6811/#leetcode-106",
            "text": "\u4f20\u9001\u95e8\uff1a 106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u3002   \u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002  \u6ce8\u610f: \n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002  \u4f8b\u5982\uff0c\u7ed9\u51fa  \u4e2d\u5e8f\u904d\u5386 inorder =  [9,3,15,20,7] \n\u540e\u5e8f\u904d\u5386 postorder =  [9,15,7,20,3]  \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3\n   / \\\n  9  20\n      / \\\n     15  7   \u601d\u8def\uff1a\u4e8c\u53c9\u6811\u7684\u95ee\u9898\uff0c\u5728\u7eb8\u4e0a\u5199\u5199\u753b\u753b\u66f4\u5f62\u8c61\u3002  Python \u4ee3\u7801\uff1a  class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n\n        assert len(inorder) == len(postorder)\n\n        if len(inorder) == 0:\n            return None\n        if len(inorder) == 1:\n            # \u8fd9\u91cc\u8981\u8fd4\u56de\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u5177\u4f53\u7684\u6570\n            return TreeNode(inorder[0])\n\n        # \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9\n        root = TreeNode(postorder[-1])\n\n        pos = inorder.index(postorder[-1])\n\n        root.left = self.buildTree(inorder[:pos], postorder[:pos])\n        root.right = self.buildTree(inorder[pos + 1:], postorder[pos:-1])\n        return root\n\n\n# \u7528\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5\ndef validate(node):\n    if node is None:\n        return\n    validate(node.left)\n    print(node.val, end=' ')\n    validate(node.right)\n\n\nif __name__ == '__main__':\n    inorder = [9, 3, 15, 20, 7]\n    postorder = [9, 15, 7, 20, 3]\n    solution = Solution()\n    root = solution.buildTree(inorder, postorder)\n    validate(root)",
            "title": "LeetCode \u7b2c 106 \u9898\uff1a\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"
        },
        {
            "location": "/08-\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 8 \u9898] \u201c\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 8 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n\n\n\u4f20\u9001\u95e8\uff1a\nAcWing\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n\uff0c\n\u725b\u5ba2\u7f51 online judge \u5730\u5740\n\u3002\n\n\n\n\n\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9;\n\n\n\u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b\n\n\n\n\n\u6837\u4f8b\uff1a\n\n\n\u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a\n[2, 1, 3, null, null, null, null]\n\uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e 2 \u7684\u8282\u70b9\u3002\n\n\n\u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002\n\n\n\u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2 \u7684\u540e\u7ee7\u8282\u70b9\u662f 3 \u3002\n\n2\n   / \\\n1   3\n\n\n\n\n\u601d\u8def\uff1a\u7528\u300a\u7b97\u5bfc\u300b\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u753b\u56fe\u5206\u6790\uff0c\u628a\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5206\u6790\u6e05\u695a\uff0c\u7f16\u7801\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a\n\u770b\u662f\u5426\u6709\u53f3\u5b50\u6811\n\u3002\n\n\n\n\n\u753b\u4e2a\u6e05\u695a\u7684\u56fe\u5e2e\u52a9\u7406\u89e3\uff1a\n\n\n\n\nPython \u4ee3\u7801\uff1a\n\n\nclass Solution(object):\n    def inorderSuccessor(self, q):\n        \"\"\"\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n\n        if q is None:\n            return None\n\n        # \u5206\u7c7b\u8ba8\u8bba1\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u8fd4\u56de\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8005\n        if q.right:\n            node = q.right\n            while node.left:\n                node = node.left\n            return node\n        # \u5206\u7c7b\u8ba8\u8bba2\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5411\u4e0a\u8ffd\u6eaf\uff0c\u8ffd\u5230\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u662f\u81ea\u5df1\n        while q.father:\n            if q.father.left == q:\n                return q.father\n            q = q.father\n        return None",
            "title": "08-\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"
        },
        {
            "location": "/08-\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9/#offer-2-8",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 8 \u9898] \u201c\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/08-\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9/#8",
            "text": "\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002   \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002  \u6ce8\u610f\uff1a   \u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9;  \u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b   \u6837\u4f8b\uff1a  \u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a [2, 1, 3, null, null, null, null] \uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e 2 \u7684\u8282\u70b9\u3002  \u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002  \u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2 \u7684\u540e\u7ee7\u8282\u70b9\u662f 3 \u3002 2\n   / \\\n1   3   \u601d\u8def\uff1a\u7528\u300a\u7b97\u5bfc\u300b\u4e2d\u63d0\u51fa\u7684\u65b9\u6cd5\uff0c\u753b\u56fe\u5206\u6790\uff0c\u628a\u8981\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u5206\u6790\u6e05\u695a\uff0c\u7f16\u7801\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\uff1a \u770b\u662f\u5426\u6709\u53f3\u5b50\u6811 \u3002   \u753b\u4e2a\u6e05\u695a\u7684\u56fe\u5e2e\u52a9\u7406\u89e3\uff1a   Python \u4ee3\u7801\uff1a  class Solution(object):\n    def inorderSuccessor(self, q):\n        \"\"\"\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n\n        if q is None:\n            return None\n\n        # \u5206\u7c7b\u8ba8\u8bba1\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u8fd4\u56de\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8005\n        if q.right:\n            node = q.right\n            while node.left:\n                node = node.left\n            return node\n        # \u5206\u7c7b\u8ba8\u8bba2\uff1a\u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5411\u4e0a\u8ffd\u6eaf\uff0c\u8ffd\u5230\u7236\u4eb2\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u662f\u81ea\u5df1\n        while q.father:\n            if q.father.left == q:\n                return q.father\n            q = q.father\n        return None",
            "title": "\u7b2c 8 \u9898\uff1a\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"
        },
        {
            "location": "/09-1-\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 9-1 \u9898] \u201c\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 9-1 \u9898\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\n\n\n\u4f20\u9001\u95e8\uff1a\nAcWing\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\n\uff0c\n\u725b\u5ba2\u7f51 online judge \u5730\u5740\n\u3002\n\n\n\n\n\u8bf7\u7528\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u652f\u6301\u5982\u4e0b\u56db\u79cd\u64cd\u4f5c\uff1a\n\n\n\n\npush(x) \u2013 \u5c06\u5143\u7d20x\u63d2\u5230\u961f\u5c3e\uff1b\n\n\npop() \u2013 \u5c06\u961f\u9996\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\uff1b\n\n\npeek() \u2013 \u8fd4\u56de\u961f\u9996\u5143\u7d20\uff1b\n\n\nempty() \u2013 \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1b\n\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u4f60\u53ea\u80fd\u4f7f\u7528\u6808\u7684\u6807\u51c6\u64cd\u4f5c\uff1a\npush to top\n\uff0c\npeek/pop from top\n, \nsize\n \u548c \nis empty\n\uff1b\n\n\n\u5982\u679c\u4f60\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\u7684\u6807\u51c6\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528list\u6216\u8005deque\u7b49\u6a21\u62df\u6808\u7684\u64cd\u4f5c\uff1b\n\n\n\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4f8b\u5982\uff0c\u5728\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c\npop\n\u6216\u8005\npeek\n\u7b49\u64cd\u4f5c\uff1b\n\n\n\n\n\u6837\u4f8b\n\n\n```\nMyQueue queue = new MyQueue();\n\n\nqueue.push(1);\nqueue.push(2);\nqueue.peek();  // returns 1\nqueue.pop();   // returns 1\nqueue.empty(); // returns false\n```\n\n\n\n\n\u5206\u6790\uff1a+ \u76f8\u5173\u7684\u7ec3\u4e60\u8fd8\u6709 LeetCode \u7b2c 232 \u9898\uff0c\u8fd8\u6709\u7b2c 225 \u9898\u3002\n+ \u5728\u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u4f5c\u4e3a\u72b6\u6001\u3002\u5177\u4f53\u5e94\u7528\u5982\u4e0b\uff1a\n\n\n\u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f push\uff1a  \n\n\n1\u3001\u6211\u7ee7\u7eed push \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5f80\u6808\u91cc\u5b58\u6570\u636e\uff1b\n\n2\u3001\u4f46\u662f\u5982\u679c\u6211 pop \u7684\u8bdd\uff0c\u5c31\u8981\u628a\u201c\u6808\u5e95\u201d\u7684\u5143\u7d20\u62ff\u51fa\u6765\uff0c\u62ff\u51fa\u4e4b\u524d\uff0c\u8981\u628a\u201c\u6808\u5e95\u201d\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5f39\u51fa\u5230\u53e6\u4e00\u4e2a\u6808\u4e2d\u3002\u6b64\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u51fa\u961f\u7684\u8bdd\uff0c\u5c31\u4ece\u4e34\u65f6\u6808\u4e2d\u9646\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002   \n\n\n\u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f pop\uff1a  \n\n\n1\u3001\u5982\u679c\u6211\u7ee7\u7eed pop\uff0c\u56e0\u4e3a\u5728\u4e0a\u4e00\u6b21 pop \u7684\u65f6\u5019\uff0c\u5c31\u628a\u4e4b\u524d\u90a3\u4e2a\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u5230\u4e00\u4e2a\u65b0\u7684\u6808\uff0c\u6b64\u65f6\u8fd9\u4e2a\u65b0\u6808\u7ee7\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\uff0c\u5176\u5b9e\u5c31\u662f\u539f\u6765\u5165\u961f\u7684\u987a\u5e8f\uff1b\n\n2\u3001\u5982\u679c\u6211 push\uff0c\u5c31\u5f97\u6062\u590d\u4e4b\u524d\u5165\u961f\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\uff0c\u8981\u628a\u8fd9\u4e2a\u6808\u4e2d\u7684\u6570\u636e\u5168\u90e8\u5f39\u51fa\u5230\u4e4b\u524d\u5165\u961f\u7684\u90a3\u4e2a\u6808\u3002  \n\n\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u4e24\u4e2a\u6808 stack1 \u548c stack2 \uff1a\n\n1\u3001\u4f7f\u7528 stack1 \u4e13\u95e8\u7528\u4e8e push \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u51fa\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack2\uff0c\u4ece stack2 \u5f39\u51fa \uff1b\n\n2\u3001\u4f7f\u7528 stack2 \u4e13\u95e8\u7528\u4e8e pop \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u5165\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack1\uff0c\u4ece stack1 \u538b\u5165 \u3002 \n\n\nJava \u4ee3\u7801\uff1a\n\n\nimport java.util.Stack;\n\npublic class Solution {\n    /**\n     * \u4e13\u95e8 push \u7684\u65f6\u5019\u7528\n     */\n    private Stack<Integer> stack1 = new Stack<Integer>();\n    /**\n     * \u4e13\u95e8 pop \u7684\u65f6\u5019\u7528\n     */\n    private Stack<Integer> stack2 = new Stack<Integer>();\n\n    private State lastState = State.PUSH;\n\n    enum State {\n        PUSH, POP\n    }\n\n    public void push(int node) {\n        if (lastState == State.PUSH) {\n            stack1.add(node);\n        } else {\n            assert lastState == State.POP;\n            // \u5982\u679c\u4e0a\u4e00\u6b65\u662f pop \u7684\u8bdd\uff0c\n            while (!stack2.isEmpty()) {\n                stack1.add(stack2.pop());\n            }\n            stack1.add(node);\n            lastState = State.PUSH;\n        }\n    }\n\n    public int pop() {\n        if (lastState == State.POP) {\n            if (stack2.empty()) {\n                throw new IllegalArgumentException(\"queue is empty\");\n            }\n            return stack2.pop();\n        } else {\n            // \u5982\u679c\u4e0a\u4e00\u6b65\u662f PUSH \u7684\u8bdd\n            while (!stack1.empty()) {\n                stack2.add(stack1.pop());\n            }\n            lastState = State.POP;\n            return stack2.pop();\n        }\n    }\n}\n\n\n\n\n\u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u662f\u9519\u7684\uff0c\u5e94\u8be5\u662f\u53ea\u8981 stack2 \u662f\u7a7a\u7684\uff0c\u624d\u628a stack1 \u7684\u5143\u7d20\u5168\u90e8\u642c\u5230 stack2\uff0c\u8fd9\u91cc\u8981\u5c0f\u5fc3\u3002\n\n\n    def __shift(self):\n        if self.stack1:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n\n\n\n\nPython \u4ee3\u7801\uff1a\n\n\nclass MyQueue(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.stack1.append(x)\n\n    def __shift(self):\n        if len(self.stack2) == 0:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n\n    def pop(self):\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        :rtype: int\n        \"\"\"\n        self.__shift()\n        return self.stack2.pop()\n\n    def peek(self):\n        \"\"\"\n        Get the front element.\n        :rtype: int\n        \"\"\"\n        self.__shift()\n        return self.stack2[-1]\n\n    def empty(self):\n        \"\"\"\n        Returns whether the queue is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.stack1) == 0 and len(self.stack2) == 0\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
            "title": "09-1-\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"
        },
        {
            "location": "/09-1-\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217/#offer-2-9-1",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 9-1 \u9898] \u201c\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/09-1-\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217/#9-1",
            "text": "\u4f20\u9001\u95e8\uff1a AcWing\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \uff0c \u725b\u5ba2\u7f51 online judge \u5730\u5740 \u3002   \u8bf7\u7528\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u652f\u6301\u5982\u4e0b\u56db\u79cd\u64cd\u4f5c\uff1a   push(x) \u2013 \u5c06\u5143\u7d20x\u63d2\u5230\u961f\u5c3e\uff1b  pop() \u2013 \u5c06\u961f\u9996\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u5e76\u8fd4\u56de\u8be5\u5143\u7d20\uff1b  peek() \u2013 \u8fd4\u56de\u961f\u9996\u5143\u7d20\uff1b  empty() \u2013 \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1b   \u6ce8\u610f\uff1a   \u4f60\u53ea\u80fd\u4f7f\u7528\u6808\u7684\u6807\u51c6\u64cd\u4f5c\uff1a push to top \uff0c peek/pop from top ,  size  \u548c  is empty \uff1b  \u5982\u679c\u4f60\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\u7684\u6807\u51c6\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528list\u6216\u8005deque\u7b49\u6a21\u62df\u6808\u7684\u64cd\u4f5c\uff1b  \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4f8b\u5982\uff0c\u5728\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c pop \u6216\u8005 peek \u7b49\u64cd\u4f5c\uff1b   \u6837\u4f8b  ```\nMyQueue queue = new MyQueue();  queue.push(1);\nqueue.push(2);\nqueue.peek();  // returns 1\nqueue.pop();   // returns 1\nqueue.empty(); // returns false\n```   \u5206\u6790\uff1a+ \u76f8\u5173\u7684\u7ec3\u4e60\u8fd8\u6709 LeetCode \u7b2c 232 \u9898\uff0c\u8fd8\u6709\u7b2c 225 \u9898\u3002\n+ \u5728\u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u4f5c\u4e3a\u72b6\u6001\u3002\u5177\u4f53\u5e94\u7528\u5982\u4e0b\uff1a  \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f push\uff1a    1\u3001\u6211\u7ee7\u7eed push \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5f80\u6808\u91cc\u5b58\u6570\u636e\uff1b \n2\u3001\u4f46\u662f\u5982\u679c\u6211 pop \u7684\u8bdd\uff0c\u5c31\u8981\u628a\u201c\u6808\u5e95\u201d\u7684\u5143\u7d20\u62ff\u51fa\u6765\uff0c\u62ff\u51fa\u4e4b\u524d\uff0c\u8981\u628a\u201c\u6808\u5e95\u201d\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5f39\u51fa\u5230\u53e6\u4e00\u4e2a\u6808\u4e2d\u3002\u6b64\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u51fa\u961f\u7684\u8bdd\uff0c\u5c31\u4ece\u4e34\u65f6\u6808\u4e2d\u9646\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002     \u5982\u679c\u201c\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\u201d\u662f pop\uff1a    1\u3001\u5982\u679c\u6211\u7ee7\u7eed pop\uff0c\u56e0\u4e3a\u5728\u4e0a\u4e00\u6b21 pop \u7684\u65f6\u5019\uff0c\u5c31\u628a\u4e4b\u524d\u90a3\u4e2a\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u5230\u4e00\u4e2a\u65b0\u7684\u6808\uff0c\u6b64\u65f6\u8fd9\u4e2a\u65b0\u6808\u7ee7\u7eed\u5f39\u51fa\u201c\u6808\u9876\u201d\u5143\u7d20\uff0c\u5176\u5b9e\u5c31\u662f\u539f\u6765\u5165\u961f\u7684\u987a\u5e8f\uff1b \n2\u3001\u5982\u679c\u6211 push\uff0c\u5c31\u5f97\u6062\u590d\u4e4b\u524d\u5165\u961f\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\uff0c\u8981\u628a\u8fd9\u4e2a\u6808\u4e2d\u7684\u6570\u636e\u5168\u90e8\u5f39\u51fa\u5230\u4e4b\u524d\u5165\u961f\u7684\u90a3\u4e2a\u6808\u3002    \u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u51c6\u5907\u4e24\u4e2a\u6808 stack1 \u548c stack2 \uff1a \n1\u3001\u4f7f\u7528 stack1 \u4e13\u95e8\u7528\u4e8e push \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u51fa\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack2\uff0c\u4ece stack2 \u5f39\u51fa \uff1b \n2\u3001\u4f7f\u7528 stack2 \u4e13\u95e8\u7528\u4e8e pop \u7684\u65f6\u5019\u7528\uff0c\u8981\u201c\u5165\u961f\u201d\u4e4b\u524d\uff0c\u5168\u90e8\u5f39\u51fa\u5230 stack1\uff0c\u4ece stack1 \u538b\u5165 \u3002   Java \u4ee3\u7801\uff1a  import java.util.Stack;\n\npublic class Solution {\n    /**\n     * \u4e13\u95e8 push \u7684\u65f6\u5019\u7528\n     */\n    private Stack<Integer> stack1 = new Stack<Integer>();\n    /**\n     * \u4e13\u95e8 pop \u7684\u65f6\u5019\u7528\n     */\n    private Stack<Integer> stack2 = new Stack<Integer>();\n\n    private State lastState = State.PUSH;\n\n    enum State {\n        PUSH, POP\n    }\n\n    public void push(int node) {\n        if (lastState == State.PUSH) {\n            stack1.add(node);\n        } else {\n            assert lastState == State.POP;\n            // \u5982\u679c\u4e0a\u4e00\u6b65\u662f pop \u7684\u8bdd\uff0c\n            while (!stack2.isEmpty()) {\n                stack1.add(stack2.pop());\n            }\n            stack1.add(node);\n            lastState = State.PUSH;\n        }\n    }\n\n    public int pop() {\n        if (lastState == State.POP) {\n            if (stack2.empty()) {\n                throw new IllegalArgumentException(\"queue is empty\");\n            }\n            return stack2.pop();\n        } else {\n            // \u5982\u679c\u4e0a\u4e00\u6b65\u662f PUSH \u7684\u8bdd\n            while (!stack1.empty()) {\n                stack2.add(stack1.pop());\n            }\n            lastState = State.POP;\n            return stack2.pop();\n        }\n    }\n}  \u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u4e2a\u903b\u8f91\u662f\u9519\u7684\uff0c\u5e94\u8be5\u662f\u53ea\u8981 stack2 \u662f\u7a7a\u7684\uff0c\u624d\u628a stack1 \u7684\u5143\u7d20\u5168\u90e8\u642c\u5230 stack2\uff0c\u8fd9\u91cc\u8981\u5c0f\u5fc3\u3002      def __shift(self):\n        if self.stack1:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())  Python \u4ee3\u7801\uff1a  class MyQueue(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.stack1.append(x)\n\n    def __shift(self):\n        if len(self.stack2) == 0:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n\n    def pop(self):\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        :rtype: int\n        \"\"\"\n        self.__shift()\n        return self.stack2.pop()\n\n    def peek(self):\n        \"\"\"\n        Get the front element.\n        :rtype: int\n        \"\"\"\n        self.__shift()\n        return self.stack2[-1]\n\n    def empty(self):\n        \"\"\"\n        Returns whether the queue is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.stack1) == 0 and len(self.stack2) == 0\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()",
            "title": "\u7b2c 9-1 \u9898\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"
        },
        {
            "location": "/09-2-\u7528\u961f\u5217\u5b9e\u73b0\u6808/",
            "text": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 9-2 \u9898] \u201c\u7528\u961f\u5217\u5b9e\u73b0\u6808\u201d\u505a\u9898\u8bb0\u5f55\n\n\n\u7b2c 9-2 \u9898\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u6808\n\n\n\u540c LeetCode \u7b2c 225 \u9898\u3002\n\n\n\u4f20\u9001\u95e8\uff1a\n225. \u7528\u961f\u5217\u5b9e\u73b0\u6808\n\n\n\n\n\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a\n\n\n\n\npush(x) -- \u5143\u7d20 x \u5165\u6808\n\n\npop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20\n\n\ntop() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20\n\n\nempty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a\n\n\n\n\n\u6ce8\u610f:\n\n\n\n\n\u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f \npush to back\n, \npeek/pop from front\n, \nsize\n, \u548c \nis empty\n \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002\n\n\n\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002\n\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002\n\n\n\n\n\n\nPython \u4ee3\u7801\uff1a\n\n\nclass MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n        self.queue = []\n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.queue.append(x)\n        # \u5c06\u961f\u5217\u4e2d\u524d\u9762\u5df2\u7ecf\u9006\u5e8f\u7684\u5143\u7d20\u653e\u5728 x \u5143\u7d20\u540e\u9762\uff0c\u4f7f\u5f97\u6574\u4f53\u9006\u5e8f\n        for _ in range(len(self.queue) - 1):\n            ele = self.queue.pop(0)\n            self.queue.append(ele)\n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n        if self.queue:\n            return self.queue.pop(0)\n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n        if self.queue:\n            return self.queue[0]\n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.queue) == 0\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
            "title": "09-2-\u7528\u961f\u5217\u5b9e\u73b0\u6808"
        },
        {
            "location": "/09-2-\u7528\u961f\u5217\u5b9e\u73b0\u6808/#offer-2-9-2",
            "text": "",
            "title": "[\u5251\u6307 Offer \u7b2c 2 \u7248\u7b2c 9-2 \u9898] \u201c\u7528\u961f\u5217\u5b9e\u73b0\u6808\u201d\u505a\u9898\u8bb0\u5f55"
        },
        {
            "location": "/09-2-\u7528\u961f\u5217\u5b9e\u73b0\u6808/#9-2",
            "text": "\u540c LeetCode \u7b2c 225 \u9898\u3002  \u4f20\u9001\u95e8\uff1a 225. \u7528\u961f\u5217\u5b9e\u73b0\u6808   \u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a   push(x) -- \u5143\u7d20 x \u5165\u6808  pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20  top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20  empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a   \u6ce8\u610f:   \u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f  push to back ,  peek/pop from front ,  size , \u548c  is empty  \u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002  \u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217 , \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002  \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002    Python \u4ee3\u7801\uff1a  class MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n        self.queue = []\n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.queue.append(x)\n        # \u5c06\u961f\u5217\u4e2d\u524d\u9762\u5df2\u7ecf\u9006\u5e8f\u7684\u5143\u7d20\u653e\u5728 x \u5143\u7d20\u540e\u9762\uff0c\u4f7f\u5f97\u6574\u4f53\u9006\u5e8f\n        for _ in range(len(self.queue) - 1):\n            ele = self.queue.pop(0)\n            self.queue.append(ele)\n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n        if self.queue:\n            return self.queue.pop(0)\n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n        if self.queue:\n            return self.queue[0]\n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.queue) == 0\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()",
            "title": "\u7b2c 9-2 \u9898\uff1a\u7528\u961f\u5217\u5b9e\u73b0\u6808"
        }
    ]
}